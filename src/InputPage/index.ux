<template>
  <!-- template里只能有一个根节点 -->
  <div class="input-page">
    <!-- 返回和提交按钮 -->
    <div class="title-bar">
      <div class="back-button" onclick="back"></div>
      <div class="submit-button" onclick="submit"></div>
    </div>
    <!-- 输入待办事项 -->
    <div class="input-container">
      <input id="input" class="text-input" type="text" placeholder="添加待办事项" onchange="updateInput" value="{{inputValue}}" onfocus="titleFocus"/>
    </div>
    <!-- 分割线 -->
    <div class="separator"></div>
    <!-- 选择开始和结束时间 -->
    <div class="date-time-container">
      <text value="开始时间" class="label-text"></text>
      <div class="date-time-subcontainer">
        <div class="date-image"></div>
        <picker class="date-picker" type="date" selected="{{startDate}}" value="{{startDate}}" onchange="updateStartDate"></picker>
        <div class="time-image"></div>
        <picker class="time-picker" type="time" selected="{{startTime}}" value="{{startTime}}" onchange="updateStartTime"></picker>
      </div>
      <text value="结束时间" class="label-text"></text>
      <div class="date-time-subcontainer">
        <div class="date-image"></div>
        <picker class="date-picker" type="date" selected="{{endDate}}" value="{{endDate}}" onchange="updateEndDate"></picker>
        <div class="time-image"></div>
        <picker class="time-picker" type="time" selected="{{endTime}}" value="{{endTime}}" onchange="updateEndTime"></picker>
      </div>
    </div>

    <div class="separator"></div>
  <!-- 选择提醒时间 -->
    <div class="remind-container">
      <text value="提醒" class="label-text"></text>
      <div class="remind-picker-container">
        <picker type="text" value="{{remindText}}" range="{{remindRange}}" onchange="remindChange"></picker>
        <div class="right"></div>
      </div>
    </div>

    <div class="separator"></div>
  <!-- 输入地点和备注 -->
    <div class="others-container">
      <input id="input" class="text-input" type="text" placeholder="请输入地点" onchange="updatePosition" value="{{position}}" onfocus="positionFocus"/>
      <input id="input" class="text-input" type="text" placeholder="请输入备注" onchange="updateRemark" value="{{remark}}" onfocus="remarkFocus"/>
    </div>
  <!-- 语音输入按钮 -->
    <div class="voice-container" ontouchstart="startArs" ontouchend="endAsr">
      <div class="voice-button"></div>
    </div>
  </div>
</template>

<script>
import prompt from '@system.prompt'
import storage from '@system.storage'
import router from '@system.router'
import calendar from '@system.calendar'
import asr from '@service.asr'
import vibrator from '@system.vibrator'


export default {
  protected: {
    inputValue: '',
    position: '',
    remark: '',
    startDate: '',
    endDate: '',
    startTime: '',
    endTime: '',
    toDoList: [],
    remindRange: ['不提醒','开始前10分钟','开始前半小时','开始前一小时','开始前两小时'],
    remindText: '不提醒',
    remindIndex: 0,
    focusInput: 0,  // 当前焦点所在的输入框
  },
// 初始化时调用
  onInit() {
    // 初始化语音输入
    this.initAsr()
    // 使用当前时间初始化开始时间和结束时间
    let currentDate = new Date();
    this.startDate = currentDate.getFullYear() + '-' + (1 + currentDate.getMonth()) + '-' + currentDate.getDate();
    this.startTime = currentDate.getHours() + ':' + currentDate.getMinutes();
    let laterDate = new Date(currentDate.getTime() + 60 * 60 * 1000);
    this.endDate = laterDate.getFullYear() + '-' + (1 + laterDate.getMonth()) + '-' + laterDate.getDate();
    this.endTime = laterDate.getHours() + ':' + laterDate.getMinutes();
    // 从内存中加载todolist
    const that = this;
    storage.get({
      key: 'toDoData',
      success: function (data) {
        that.toDoList = JSON.parse(data);
      }
    });
  },
  // 更新输入框内容
  updateInput(event) {
    this.inputValue = event.text;
  },

  updatePosition(event) {
    this.position = event.text;
  },

  updateRemark(event) {
    this.remark = event.text;
  },
  // 更新picker显示内容
  updateStartDate(event) {
    this.startDate = event.year + '-' + (1 + event.month) + '-' + event.day
  },

  updateStartTime(event) {
    this.startTime = event.hour + ':' + event.minute
  },

  updateEndDate(event) {
    this.endDate = event.year + '-' + (1 + event.month) + '-' + event.day
  },

  updateEndTime(event) {
    this.endTime = event.hour + ':' + event.minute
  },
  // 更新焦点位置
  titleFocus () {
    this.focusInput = 0;
  },

  positionFocus() {
    this.focusInput = 1;
  },

  remarkFocus() {
    this.focusInput = 2;
  },
  // 初始化语音输入
  initAsr() {
    let that = this
    asr.init({
      fail: function () {
        that.$app.$def.makeToast('init failed!')
      }
    })
    asr.onpartialresult = ({ result }) => {
      if (this.focusInput == 0) {
        this.inputValue = `${result}`;
      } else if (this.focusInput == 1) {
        this.position = `${result}`;
      } else {
        this.remark = `${result}`;
      }
    }
    asr.oncompleteresult = ({ result }) => {
      if (this.focusInput == 0) {
        this.inputValue = `${result.match(/\[(.*)\]/)[1]}`;
      } else if (this.focusInput == 1) {
        this.position = `${result.match(/\[(.*)\]/)[1]}`;
      } else {
        this.remark = `${result.match(/\[(.*)\]/)[1]}`;
      }
    }
    asr.onerror = (error) => {
      this.text = `onerror: ${error}`
    }
  },
  // 开始语音输入
  startArs() {
    asr.start({
      success: function () {
        vibrator.vibrate({ mode: 'short' })
      },
      fail: function (data, code) {
        console.log( `start fail, code=${code}, data=${data}` );
      }
    })
  },
  // 结束语音输入
  endAsr() {
    asr.stop({
      success: function () { },
      fail: function (data, code) {
        console.log( `stop fail, code=${code}, data=${data}` );
      }
    })
  },
  // 关闭语音输入
  onDestroy() {
    asr.close();
  },
  // 日期时间字符串转1970年1月1日到现在的毫秒数
  str2time(dateStr, timeStr) {
    let DateArr = dateStr.split('-');
    let tmpYear = Number(DateArr[0]);
    let tmpMonth = DateArr[1] - '1';
    let tmpDate = Number(DateArr[2]);

    let TimeArr = timeStr.split(':');
    let tmpHour = Number(TimeArr[0]);
    let tmpMinute = Number(TimeArr[1]);

    let date = new Date(tmpYear, tmpMonth, tmpDate, tmpHour, tmpMinute);
    return date.getTime();
  },
  // 提交
  submit() {
    // 待办事项名称不能为空
    if (this.inputValue == '') {
      prompt.showToast({
        message: '待办事项不能为空',
      })
      return false;
    }
    // 获取当前时间、开始时间和结束时间的毫秒数
    let current_time = new Date().getTime();
    let start_time = this.str2time(this.startDate, this.startTime);
    let end_time = this.str2time(this.endDate, this.endTime);
    // 开始时间不能早于当前时间
    if (start_time < current_time) {
      prompt.showToast({
        message: '开始时间不能早于当前时间'
      })
      return false;
    }
    // 结束时间不能早于当前时间
    if (end_time < current_time) {
      prompt.showToast({
        message: '结束时间不能早于当前时间'
      })
      return false;
    }
    // 结束时间不能早于开始时间
    if (end_time < start_time) {
      prompt.showToast({
        message: '结束时间不能早于开始时间'
      })
      return false;
    }
    // 计算提醒时间
    let remindTime = [];
    if (this.remindIndex == 1) {
      remindTime = [10]
    } else if (this.remindIndex == 2) {
      remindTime = [30]
    } else if (this.remindIndex == 3) {
      remindTime = [60]
    } else if (this.remindIndex == 4) {
      remindTime = [120]
    }
    // 插入系统日程
    calendar.insert({
      title: this.inputValue,
      description: this.remark,
      startDate: this.str2time(this.startDate, this.startTime),
      endDate: this.str2time(this.endDate, this.endTime),
      remindMinutes: remindTime,
      success: function() {
        console.log('日历添加成功')
      },
      fail: function() {
        console.log('日历添加失败')
      }
    })
    // 插入todolist
    this.toDoList.push({
      title: this.inputValue,
      startDate: this.startDate,
      startTime: this.startTime,
      endDate: this.endDate,
      endTime: this.endTime,
      position: this.position,
      remark: this.remark,
      remind: this.remindIndex,
    })
    // 保存到内存
    storage.set({
      key: 'toDoData',
      value: JSON.stringify(this.toDoList),
      success: function() {
        console.log('添加成功！');
        prompt.showToast({
          message: '添加成功'
      })
      },
      fail: function() {
        console.log('添加失败');
      }
    })
    // 返回上级页面
    router.back();
  },

  back() {
    router.back();
  },
  // 更新提醒文字和索引
  remindChange(remindEvent) {
    this.remindText = remindEvent.newValue;
    this.remindIndex = remindEvent.newSelected;
  }
}
</script>

<style>
  .input-page {
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    background-color: rgb(242,242,242);
  }

  .input-container {
    width: 90%;
    flex-direction: column;
    margin-top: 50px;
  }

  .text-input {
    border-radius: 20px;
    background-color: #ffffff;
    font-size: 50px;
    padding: 10px;
    caret-color: #38A0FF;
    margin-bottom: 20px;
  }

  .clear-button {
    width: 80px;
    height: 80px;
    margin-right: 30px;
    background-image: url('../Common/round_close.png');
  }


  .date-time-container {
    flex-direction: column;
    width: 90%;
    justify-content: space-around;
  }

  .date-image {
    height: 50px;
    width: 50px;
    background-image: url('../Common/日历.png');
  }

  .time-image {
    height: 50px;
    width: 50px;
    margin-left: 25px;
    background-image: url('../Common/时间.png');
  }

  .date-time-subcontainer {
      background-color: #ffffff;
      border-radius: 20px;
      padding-top: 10px;
      padding-bottom: 10px;
      padding-left: 25px;
      padding-right: 25px;
      margin-top: 20px;
      margin-bottom: 20px;
  }


  .voice-container {
    width: 120px;
    height: 120px;
    align-items: center;
    justify-content: center;
    background-color: #38A0FF;
    border-radius: 60px;
    position: absolute;
    right: 50px;
    bottom: 50px;
  }

  .voice-button {
    width: 80px;  
    height: 80px;
    background-image: url('../Common/语音3.png');
  }

  .title-bar {
    width: 90%;
    align-items: center;
    justify-content: space-between;
  }

  .back-button {
    height: 60px;
    width: 60px;
    background-image: url('../Common/close.png');
  }

  .submit-button {
    height: 60px;
    width: 60px;
    background-image: url('../Common/check.png');
  }

  .remind-container {
    width: 90%;
    justify-content: space-between;
    align-items: center;
  }

  .label-text {
    color: #000000;
    font-size: 35px;
    font-weight: bold;
  }

  .right {
    margin-left: 10px;
    height: 30px;
    width: 30px;
    background-image: url('../Common/arrow-right-bold.png');
  }

  .remind-picker-container {
    align-items: center;
  }

  .others-container {
    width: 90%;
    flex-direction: column;
  }

  .separator {
    width: 90%;
    border: 1px solid #cdcdcd;
    margin-bottom: 30px;
    margin-top: 30px;
  }
</style>
